{"remainingRequest":"/usr/src/app/twitter-chat-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/src/app/twitter-chat-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/src/app/twitter-chat-app/src/App.vue","mtime":1557144172000},{"path":"/usr/src/app/twitter-chat-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// firebase モジュール\nimport firebase from 'firebase'\n// 改行を <br> タグに変換するモジュール\nimport Nl2br from 'vue-nl2br'\nimport Twitter from 'twitter'\n\nconst client = new Twitter({\n  consumer_key: 'Prm7YrAGZutpgdxd90AMjXmNL',\n  consumer_secret: '09GTs92w8nXmxAXi34EjoILT8aDGXZeKASPsuyGm7c6ilStIScs',\n  access_token_key: '991244952481890304-dXGvzFE8m1OJZF8nvsSi06Vrys2kYuD',\n  access_token_secret: 'MzQNEAsKJSsCNd4KixSpuWH90NLYM8s5iTD0OaTgEZ8jh'\n});\n\nexport default {\n  components: { Nl2br },\n  data() {\n    return {\n      user: {},  // ユーザー情報\n      chat: [],  // 取得したメッセージを入れる配列\n      input: '',  // 入力したメッセージ\n      token: '',\n      secret: ''\n    }\n  },\n  async created() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.user = user ? user : {}\n      const ref_message = firebase.database().ref('message')\n      if (user) {\n        this.chat = []\n        // message に変更があったときのハンドラを登録\n        ref_message.limitToLast(10).on('child_added', this.childAdded)\n      } else {\n        // message に変更があったときのハンドラを解除\n        ref_message.limitToLast(10).off('child_added', this.childAdded)\n      }\n    })\n  },\n  methods: {\n    //Cloud Function経由でやればできるかも\n    async tweet() {\n      await client.post('statuses/update', {status: 'Hello'}, (error, tweets, response) =>{\n          if (!error) {\n            console.log(tweets)\n            console.log(response)\n          } else {\n            console.log(error)\n          }\n      });\n    },\n\n    ///\n\n\n    // ログイン処理\n    async doLogin() {\n      const provider = await new firebase.auth.TwitterAuthProvider()\n      console.log(provider)\n      const result = await firebase.auth().signInWithPopup(provider)\n      console.log(result.credential.accessToken)\n      console.log(result.credential.secret)\n      console.log(result.user.uid)\n      console.log(firebase)\n      console.log(result)\n\n      // firestoreへaccessToken、secretを保存\n      const db = firebase.firestore()\n      var docRef = await db.collection('users').doc(result.user.uid);\n      await docRef.set({\n        accessToken: result.credential.accessToken,\n        secret: result.credential.secret\n      });\n      // firebase.database().ref('user').push({\n      //     accessToken: result.credential.accessToken,\n      //     secret: result.credential.secret\n      // })\n\n      \n      console.log(client)\n\n      await this.tweet()\n      // await client.post('statuses/update', {status: 'Hello'},  (error, tweet, response) => {\n      //   // console.log(tweet);  // Tweet body.\n      //   // console.log(response);  // Raw response object.\n      // })\n    },\n    \n    // ログアウト処理\n    doLogout() {\n      firebase.auth().signOut()\n    },\n    // スクロール位置を一番下に移動\n    scrollBottom() {\n      this.$nextTick(() => {\n        window.scrollTo(0, document.body.clientHeight)\n      })\n    },\n    // 受け取ったメッセージをchatに追加\n    // データベースに新しい要素が追加されると随時呼び出される\n    childAdded(snap) {\n      const message = snap.val()\n      this.chat.push({\n        key: snap.key,\n        name: message.name,\n        image: message.image,\n        message: message.message\n      })\n      this.scrollBottom()\n    },\n    doSend() {\n      if (this.user.uid && this.input.length) {\n        // firebase にメッセージを追加\n        firebase.database().ref('message').push({\n          message: this.input,\n          name: this.user.displayName,\n          image: this.user.photoURL\n        }, () => {\n          this.input = '' // フォームを空にする\n        })\n      }\n    },\n    \n    \n  }\n}\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <header class=\"header\">\n      <h1>Chat</h1>\n      <!-- ログイン時にはフォームとログアウトボタンを表示 -->\n      <div v-if=\"user.uid\" key=\"login\">\n        [{{ user.displayName }}]\n        <button type=\"button\" @click=\"doLogout\">ログアウト</button>\n      </div>\n      <!-- 未ログイン時にはログインボタンを表示 -->\n      <div v-else key=\"logout\">\n        <button type=\"button\" @click=\"doLogin\">ログイン</button>\n      </div>\n    </header>\n\n    <transition-group name=\"chat\" tag=\"div\" class=\"list content\">\n      <section v-for=\"{ key, name, image, message } in chat\" :key=\"key\" class=\"item\">\n        <div class=\"item-image\"><img :src=\"image\" width=\"40\" height=\"40\"></div>\n        <div class=\"item-detail\">\n          <div class=\"item-name\">{{ name }}</div>\n          <div class=\"item-message\">\n            <nl2br tag=\"div\" :text=\"message\"/>\n          </div>\n        </div>\n      </section>\n    </transition-group>\n  \n    <!-- 入力フォーム -->\n    <form action=\"\" @submit.prevent=\"doSend\" class=\"form\">\n      <textarea\n        v-model=\"input\"\n        :disabled=\"!user.uid\"\n        @keydown.enter.exact.prevent=\"doSend\"></textarea>\n      <button type=\"submit\" :disabled=\"!user.uid\" class=\"send-button\">Send</button>\n    </form>\n  </div>\n</template>\n\n<script>\n// firebase モジュール\nimport firebase from 'firebase'\n// 改行を <br> タグに変換するモジュール\nimport Nl2br from 'vue-nl2br'\nimport Twitter from 'twitter'\n\nconst client = new Twitter({\n  consumer_key: 'Prm7YrAGZutpgdxd90AMjXmNL',\n  consumer_secret: '09GTs92w8nXmxAXi34EjoILT8aDGXZeKASPsuyGm7c6ilStIScs',\n  access_token_key: '991244952481890304-dXGvzFE8m1OJZF8nvsSi06Vrys2kYuD',\n  access_token_secret: 'MzQNEAsKJSsCNd4KixSpuWH90NLYM8s5iTD0OaTgEZ8jh'\n});\n\nexport default {\n  components: { Nl2br },\n  data() {\n    return {\n      user: {},  // ユーザー情報\n      chat: [],  // 取得したメッセージを入れる配列\n      input: '',  // 入力したメッセージ\n      token: '',\n      secret: ''\n    }\n  },\n  async created() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.user = user ? user : {}\n      const ref_message = firebase.database().ref('message')\n      if (user) {\n        this.chat = []\n        // message に変更があったときのハンドラを登録\n        ref_message.limitToLast(10).on('child_added', this.childAdded)\n      } else {\n        // message に変更があったときのハンドラを解除\n        ref_message.limitToLast(10).off('child_added', this.childAdded)\n      }\n    })\n  },\n  methods: {\n    //Cloud Function経由でやればできるかも\n    async tweet() {\n      await client.post('statuses/update', {status: 'Hello'}, (error, tweets, response) =>{\n          if (!error) {\n            console.log(tweets)\n            console.log(response)\n          } else {\n            console.log(error)\n          }\n      });\n    },\n\n    ///\n\n\n    // ログイン処理\n    async doLogin() {\n      const provider = await new firebase.auth.TwitterAuthProvider()\n      console.log(provider)\n      const result = await firebase.auth().signInWithPopup(provider)\n      console.log(result.credential.accessToken)\n      console.log(result.credential.secret)\n      console.log(result.user.uid)\n      console.log(firebase)\n      console.log(result)\n\n      // firestoreへaccessToken、secretを保存\n      const db = firebase.firestore()\n      var docRef = await db.collection('users').doc(result.user.uid);\n      await docRef.set({\n        accessToken: result.credential.accessToken,\n        secret: result.credential.secret\n      });\n      // firebase.database().ref('user').push({\n      //     accessToken: result.credential.accessToken,\n      //     secret: result.credential.secret\n      // })\n\n      \n      console.log(client)\n\n      await this.tweet()\n      // await client.post('statuses/update', {status: 'Hello'},  (error, tweet, response) => {\n      //   // console.log(tweet);  // Tweet body.\n      //   // console.log(response);  // Raw response object.\n      // })\n    },\n    \n    // ログアウト処理\n    doLogout() {\n      firebase.auth().signOut()\n    },\n    // スクロール位置を一番下に移動\n    scrollBottom() {\n      this.$nextTick(() => {\n        window.scrollTo(0, document.body.clientHeight)\n      })\n    },\n    // 受け取ったメッセージをchatに追加\n    // データベースに新しい要素が追加されると随時呼び出される\n    childAdded(snap) {\n      const message = snap.val()\n      this.chat.push({\n        key: snap.key,\n        name: message.name,\n        image: message.image,\n        message: message.message\n      })\n      this.scrollBottom()\n    },\n    doSend() {\n      if (this.user.uid && this.input.length) {\n        // firebase にメッセージを追加\n        firebase.database().ref('message').push({\n          message: this.input,\n          name: this.user.displayName,\n          image: this.user.photoURL\n        }, () => {\n          this.input = '' // フォームを空にする\n        })\n      }\n    },\n    \n    \n  }\n}\n</script>"]}]}