{"remainingRequest":"/usr/src/app/twitter-chat-app/node_modules/thread-loader/dist/cjs.js!/usr/src/app/twitter-chat-app/node_modules/babel-loader/lib/index.js!/usr/src/app/twitter-chat-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/usr/src/app/twitter-chat-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/src/app/twitter-chat-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/src/app/twitter-chat-app/src/App.vue","mtime":1557124265000},{"path":"/usr/src/app/twitter-chat-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// firebase モジュール\nimport firebase from 'firebase'; // 改行を <br> タグに変換するモジュール\n\nimport Nl2br from 'vue-nl2br';\nexport default {\n  components: {\n    Nl2br: Nl2br\n  },\n  data: function data() {\n    return {\n      user: {},\n      // ユーザー情報\n      chat: [],\n      // 取得したメッセージを入れる配列\n      input: '' // 入力したメッセージ\n\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    firebase.auth().onAuthStateChanged(function (user) {\n      _this.user = user ? user : {};\n      var ref_message = firebase.database().ref('message');\n\n      if (user) {\n        _this.chat = []; // message に変更があったときのハンドラを登録\n\n        ref_message.limitToLast(10).on('child_added', _this.childAdded);\n      } else {\n        // message に変更があったときのハンドラを解除\n        ref_message.limitToLast(10).off('child_added', _this.childAdded);\n      }\n    });\n  },\n  methods: {\n    // ログイン処理\n    doLogin: function doLogin() {\n      var provider = new firebase.auth.TwitterAuthProvider();\n      firebase.auth().signInWithPopup(provider);\n    },\n    // ログアウト処理\n    doLogout: function doLogout() {\n      firebase.auth().signOut();\n    },\n    // スクロール位置を一番下に移動\n    scrollBottom: function scrollBottom() {\n      this.$nextTick(function () {\n        window.scrollTo(0, document.body.clientHeight);\n      });\n    },\n    // 受け取ったメッセージをchatに追加\n    // データベースに新しい要素が追加されると随時呼び出される\n    childAdded: function childAdded(snap) {\n      var message = snap.val();\n      this.chat.push({\n        key: snap.key,\n        name: message.name,\n        image: message.image,\n        message: message.message\n      });\n      this.scrollBottom();\n    },\n    doSend: function doSend() {\n      var _this2 = this;\n\n      if (this.user.uid && this.input.length) {\n        // firebase にメッセージを追加\n        firebase.database().ref('message').push({\n          message: this.input,\n          name: this.user.displayName,\n          image: this.user.photoURL\n        }, function () {\n          _this2.input = ''; // フォームを空にする\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA,OAAA,QAAA,MAAA,UAAA,C,CACA;;AACA,OAAA,KAAA,MAAA,WAAA;AACA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,KAAA,EAAA;AAAA,GADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,EADA;AACA;AACA,MAAA,IAAA,EAAA,EAFA;AAEA;AACA,MAAA,KAAA,EAAA,EAHA,CAGA;;AAHA,KAAA;AAKA,GARA;AASA,EAAA,OATA,qBASA;AAAA;;AACA,IAAA,QAAA,CAAA,IAAA,GAAA,kBAAA,CAAA,UAAA,IAAA,EAAA;AACA,MAAA,KAAA,CAAA,IAAA,GAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,UAAA,WAAA,GAAA,QAAA,CAAA,QAAA,GAAA,GAAA,CAAA,SAAA,CAAA;;AACA,UAAA,IAAA,EAAA;AACA,QAAA,KAAA,CAAA,IAAA,GAAA,EAAA,CADA,CAEA;;AACA,QAAA,WAAA,CAAA,WAAA,CAAA,EAAA,EAAA,EAAA,CAAA,aAAA,EAAA,KAAA,CAAA,UAAA;AACA,OAJA,MAIA;AACA;AACA,QAAA,WAAA,CAAA,WAAA,CAAA,EAAA,EAAA,GAAA,CAAA,aAAA,EAAA,KAAA,CAAA,UAAA;AACA;AACA,KAXA;AAYA,GAtBA;AAuBA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,OAFA,qBAEA;AACA,UAAA,QAAA,GAAA,IAAA,QAAA,CAAA,IAAA,CAAA,mBAAA,EAAA;AACA,MAAA,QAAA,CAAA,IAAA,GAAA,eAAA,CAAA,QAAA;AACA,KALA;AAMA;AACA,IAAA,QAPA,sBAOA;AACA,MAAA,QAAA,CAAA,IAAA,GAAA,OAAA;AACA,KATA;AAUA;AACA,IAAA,YAXA,0BAWA;AACA,WAAA,SAAA,CAAA,YAAA;AACA,QAAA,MAAA,CAAA,QAAA,CAAA,CAAA,EAAA,QAAA,CAAA,IAAA,CAAA,YAAA;AACA,OAFA;AAGA,KAfA;AAgBA;AACA;AACA,IAAA,UAlBA,sBAkBA,IAlBA,EAkBA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,GAAA,EAAA;AACA,WAAA,IAAA,CAAA,IAAA,CAAA;AACA,QAAA,GAAA,EAAA,IAAA,CAAA,GADA;AAEA,QAAA,IAAA,EAAA,OAAA,CAAA,IAFA;AAGA,QAAA,KAAA,EAAA,OAAA,CAAA,KAHA;AAIA,QAAA,OAAA,EAAA,OAAA,CAAA;AAJA,OAAA;AAMA,WAAA,YAAA;AACA,KA3BA;AA4BA,IAAA,MA5BA,oBA4BA;AAAA;;AACA,UAAA,KAAA,IAAA,CAAA,GAAA,IAAA,KAAA,KAAA,CAAA,MAAA,EAAA;AACA;AACA,QAAA,QAAA,CAAA,QAAA,GAAA,GAAA,CAAA,SAAA,EAAA,IAAA,CAAA;AACA,UAAA,OAAA,EAAA,KAAA,KADA;AAEA,UAAA,IAAA,EAAA,KAAA,IAAA,CAAA,WAFA;AAGA,UAAA,KAAA,EAAA,KAAA,IAAA,CAAA;AAHA,SAAA,EAIA,YAAA;AACA,UAAA,MAAA,CAAA,KAAA,GAAA,EAAA,CADA,CACA;AACA,SANA;AAOA;AACA;AAvCA;AAvBA,CAAA","sourcesContent":["<template>\n  <div id=\"app\">\n    <header class=\"header\">\n      <h1>Chat</h1>\n      <!-- ログイン時にはフォームとログアウトボタンを表示 -->\n      <div v-if=\"user.uid\" key=\"login\">\n        [{{ user.displayName }}]\n        <button type=\"button\" @click=\"doLogout\">ログアウト</button>\n      </div>\n      <!-- 未ログイン時にはログインボタンを表示 -->\n      <div v-else key=\"logout\">\n        <button type=\"button\" @click=\"doLogin\">ログイン</button>\n      </div>\n    </header>\n\n    <!--　Firebase から取得したリストを描画（トランジション付き）　-->\n    <transition-group name=\"chat\" tag=\"div\" class=\"list content\">\n      <section v-for=\"{ key, name, image, message } in chat\" :key=\"key\" class=\"item\">\n        <div class=\"item-image\"><img :src=\"image\" width=\"40\" height=\"40\"></div>\n        <div class=\"item-detail\">\n          <div class=\"item-name\">{{ name }}</div>\n          <div class=\"item-message\">\n            <nl2br tag=\"div\" :text=\"message\"/>\n          </div>\n        </div>\n      </section>\n    </transition-group>\n  \n    <!-- 入力フォーム -->\n    <form action=\"\" @submit.prevent=\"doSend\" class=\"form\">\n      <textarea\n        v-model=\"input\"\n        :disabled=\"!user.uid\"\n        @keydown.enter.exact.prevent=\"doSend\"></textarea>\n      <button type=\"submit\" :disabled=\"!user.uid\" class=\"send-button\">Send</button>\n    </form>\n  </div>\n</template>\n\n<script>\n// firebase モジュール\nimport firebase from 'firebase'\n// 改行を <br> タグに変換するモジュール\nimport Nl2br from 'vue-nl2br'\nexport default {\n  components: { Nl2br },\n  data() {\n    return {\n      user: {},  // ユーザー情報\n      chat: [],  // 取得したメッセージを入れる配列\n      input: ''  // 入力したメッセージ\n    }\n  },\n  created() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.user = user ? user : {}\n      const ref_message = firebase.database().ref('message')\n      if (user) {\n        this.chat = []\n        // message に変更があったときのハンドラを登録\n        ref_message.limitToLast(10).on('child_added', this.childAdded)\n      } else {\n        // message に変更があったときのハンドラを解除\n        ref_message.limitToLast(10).off('child_added', this.childAdded)\n      }\n    })\n  },\n  methods: {\n    // ログイン処理\n    doLogin() {\n      const provider = new firebase.auth.TwitterAuthProvider()\n      firebase.auth().signInWithPopup(provider)\n    },\n    // ログアウト処理\n    doLogout() {\n      firebase.auth().signOut()\n    },\n    // スクロール位置を一番下に移動\n    scrollBottom() {\n      this.$nextTick(() => {\n        window.scrollTo(0, document.body.clientHeight)\n      })\n    },\n    // 受け取ったメッセージをchatに追加\n    // データベースに新しい要素が追加されると随時呼び出される\n    childAdded(snap) {\n      const message = snap.val()\n      this.chat.push({\n        key: snap.key,\n        name: message.name,\n        image: message.image,\n        message: message.message\n      })\n      this.scrollBottom()\n    },\n    doSend() {\n      if (this.user.uid && this.input.length) {\n        // firebase にメッセージを追加\n        firebase.database().ref('message').push({\n          message: this.input,\n          name: this.user.displayName,\n          image: this.user.photoURL\n        }, () => {\n          this.input = '' // フォームを空にする\n        })\n      }\n    }\n  }\n}\n</script>"],"sourceRoot":"src"}]}