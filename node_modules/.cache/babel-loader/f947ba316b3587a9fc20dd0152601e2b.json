{"remainingRequest":"/usr/src/app/twitter-chat-app/node_modules/babel-loader/lib/index.js!/usr/src/app/twitter-chat-app/node_modules/cache-loader/dist/cjs.js??ref--0-0!/usr/src/app/twitter-chat-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/src/app/twitter-chat-app/src/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/src/app/twitter-chat-app/src/App.vue","mtime":1557144172000},{"path":"/usr/src/app/twitter-chat-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/twitter-chat-app/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/usr/src/app/twitter-chat-app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// firebase モジュール\nimport firebase from 'firebase'; // 改行を <br> タグに変換するモジュール\n\nimport Nl2br from 'vue-nl2br';\nimport Twitter from 'twitter';\nvar client = new Twitter({\n  consumer_key: 'Prm7YrAGZutpgdxd90AMjXmNL',\n  consumer_secret: '09GTs92w8nXmxAXi34EjoILT8aDGXZeKASPsuyGm7c6ilStIScs',\n  access_token_key: '991244952481890304-dXGvzFE8m1OJZF8nvsSi06Vrys2kYuD',\n  access_token_secret: 'MzQNEAsKJSsCNd4KixSpuWH90NLYM8s5iTD0OaTgEZ8jh'\n});\nexport default {\n  components: {\n    Nl2br: Nl2br\n  },\n  data: function data() {\n    return {\n      user: {},\n      // ユーザー情報\n      chat: [],\n      // 取得したメッセージを入れる配列\n      input: '',\n      // 入力したメッセージ\n      token: '',\n      secret: ''\n    };\n  },\n  created: function () {\n    var _created = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      var _this = this;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              firebase.auth().onAuthStateChanged(function (user) {\n                _this.user = user ? user : {};\n                var ref_message = firebase.database().ref('message');\n\n                if (user) {\n                  _this.chat = []; // message に変更があったときのハンドラを登録\n\n                  ref_message.limitToLast(10).on('child_added', _this.childAdded);\n                } else {\n                  // message に変更があったときのハンドラを解除\n                  ref_message.limitToLast(10).off('child_added', _this.childAdded);\n                }\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  methods: {\n    //Cloud Function経由でやればできるかも\n    tweet: function () {\n      var _tweet = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return client.post('statuses/update', {\n                  status: 'Hello'\n                }, function (error, tweets, response) {\n                  if (!error) {\n                    console.log(tweets);\n                    console.log(response);\n                  } else {\n                    console.log(error);\n                  }\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function tweet() {\n        return _tweet.apply(this, arguments);\n      }\n\n      return tweet;\n    }(),\n    ///\n    // ログイン処理\n    doLogin: function () {\n      var _doLogin = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var provider, result, db, docRef;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return new firebase.auth.TwitterAuthProvider();\n\n              case 2:\n                provider = _context3.sent;\n                console.log(provider);\n                _context3.next = 6;\n                return firebase.auth().signInWithPopup(provider);\n\n              case 6:\n                result = _context3.sent;\n                console.log(result.credential.accessToken);\n                console.log(result.credential.secret);\n                console.log(result.user.uid);\n                console.log(firebase);\n                console.log(result); // firestoreへaccessToken、secretを保存\n\n                db = firebase.firestore();\n                _context3.next = 15;\n                return db.collection('users').doc(result.user.uid);\n\n              case 15:\n                docRef = _context3.sent;\n                _context3.next = 18;\n                return docRef.set({\n                  accessToken: result.credential.accessToken,\n                  secret: result.credential.secret\n                });\n\n              case 18:\n                // firebase.database().ref('user').push({\n                //     accessToken: result.credential.accessToken,\n                //     secret: result.credential.secret\n                // })\n                console.log(client);\n                _context3.next = 21;\n                return this.tweet();\n\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function doLogin() {\n        return _doLogin.apply(this, arguments);\n      }\n\n      return doLogin;\n    }(),\n    // ログアウト処理\n    doLogout: function doLogout() {\n      firebase.auth().signOut();\n    },\n    // スクロール位置を一番下に移動\n    scrollBottom: function scrollBottom() {\n      this.$nextTick(function () {\n        window.scrollTo(0, document.body.clientHeight);\n      });\n    },\n    // 受け取ったメッセージをchatに追加\n    // データベースに新しい要素が追加されると随時呼び出される\n    childAdded: function childAdded(snap) {\n      var message = snap.val();\n      this.chat.push({\n        key: snap.key,\n        name: message.name,\n        image: message.image,\n        message: message.message\n      });\n      this.scrollBottom();\n    },\n    doSend: function doSend() {\n      var _this2 = this;\n\n      if (this.user.uid && this.input.length) {\n        // firebase にメッセージを追加\n        firebase.database().ref('message').push({\n          message: this.input,\n          name: this.user.displayName,\n          image: this.user.photoURL\n        }, function () {\n          _this2.input = ''; // フォームを空にする\n        });\n      }\n    }\n  }\n};",{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\">\n    <header class=\"header\">\n      <h1>Chat</h1>\n      <!-- ログイン時にはフォームとログアウトボタンを表示 -->\n      <div v-if=\"user.uid\" key=\"login\">\n        [{{ user.displayName }}]\n        <button type=\"button\" @click=\"doLogout\">ログアウト</button>\n      </div>\n      <!-- 未ログイン時にはログインボタンを表示 -->\n      <div v-else key=\"logout\">\n        <button type=\"button\" @click=\"doLogin\">ログイン</button>\n      </div>\n    </header>\n\n    <transition-group name=\"chat\" tag=\"div\" class=\"list content\">\n      <section v-for=\"{ key, name, image, message } in chat\" :key=\"key\" class=\"item\">\n        <div class=\"item-image\"><img :src=\"image\" width=\"40\" height=\"40\"></div>\n        <div class=\"item-detail\">\n          <div class=\"item-name\">{{ name }}</div>\n          <div class=\"item-message\">\n            <nl2br tag=\"div\" :text=\"message\"/>\n          </div>\n        </div>\n      </section>\n    </transition-group>\n  \n    <!-- 入力フォーム -->\n    <form action=\"\" @submit.prevent=\"doSend\" class=\"form\">\n      <textarea\n        v-model=\"input\"\n        :disabled=\"!user.uid\"\n        @keydown.enter.exact.prevent=\"doSend\"></textarea>\n      <button type=\"submit\" :disabled=\"!user.uid\" class=\"send-button\">Send</button>\n    </form>\n  </div>\n</template>\n\n<script>\n// firebase モジュール\nimport firebase from 'firebase'\n// 改行を <br> タグに変換するモジュール\nimport Nl2br from 'vue-nl2br'\nimport Twitter from 'twitter'\n\nconst client = new Twitter({\n  consumer_key: 'Prm7YrAGZutpgdxd90AMjXmNL',\n  consumer_secret: '09GTs92w8nXmxAXi34EjoILT8aDGXZeKASPsuyGm7c6ilStIScs',\n  access_token_key: '991244952481890304-dXGvzFE8m1OJZF8nvsSi06Vrys2kYuD',\n  access_token_secret: 'MzQNEAsKJSsCNd4KixSpuWH90NLYM8s5iTD0OaTgEZ8jh'\n});\n\nexport default {\n  components: { Nl2br },\n  data() {\n    return {\n      user: {},  // ユーザー情報\n      chat: [],  // 取得したメッセージを入れる配列\n      input: '',  // 入力したメッセージ\n      token: '',\n      secret: ''\n    }\n  },\n  async created() {\n    firebase.auth().onAuthStateChanged(user => {\n      this.user = user ? user : {}\n      const ref_message = firebase.database().ref('message')\n      if (user) {\n        this.chat = []\n        // message に変更があったときのハンドラを登録\n        ref_message.limitToLast(10).on('child_added', this.childAdded)\n      } else {\n        // message に変更があったときのハンドラを解除\n        ref_message.limitToLast(10).off('child_added', this.childAdded)\n      }\n    })\n  },\n  methods: {\n    //Cloud Function経由でやればできるかも\n    async tweet() {\n      await client.post('statuses/update', {status: 'Hello'}, (error, tweets, response) =>{\n          if (!error) {\n            console.log(tweets)\n            console.log(response)\n          } else {\n            console.log(error)\n          }\n      });\n    },\n\n    ///\n\n\n    // ログイン処理\n    async doLogin() {\n      const provider = await new firebase.auth.TwitterAuthProvider()\n      console.log(provider)\n      const result = await firebase.auth().signInWithPopup(provider)\n      console.log(result.credential.accessToken)\n      console.log(result.credential.secret)\n      console.log(result.user.uid)\n      console.log(firebase)\n      console.log(result)\n\n      // firestoreへaccessToken、secretを保存\n      const db = firebase.firestore()\n      var docRef = await db.collection('users').doc(result.user.uid);\n      await docRef.set({\n        accessToken: result.credential.accessToken,\n        secret: result.credential.secret\n      });\n      // firebase.database().ref('user').push({\n      //     accessToken: result.credential.accessToken,\n      //     secret: result.credential.secret\n      // })\n\n      \n      console.log(client)\n\n      await this.tweet()\n      // await client.post('statuses/update', {status: 'Hello'},  (error, tweet, response) => {\n      //   // console.log(tweet);  // Tweet body.\n      //   // console.log(response);  // Raw response object.\n      // })\n    },\n    \n    // ログアウト処理\n    doLogout() {\n      firebase.auth().signOut()\n    },\n    // スクロール位置を一番下に移動\n    scrollBottom() {\n      this.$nextTick(() => {\n        window.scrollTo(0, document.body.clientHeight)\n      })\n    },\n    // 受け取ったメッセージをchatに追加\n    // データベースに新しい要素が追加されると随時呼び出される\n    childAdded(snap) {\n      const message = snap.val()\n      this.chat.push({\n        key: snap.key,\n        name: message.name,\n        image: message.image,\n        message: message.message\n      })\n      this.scrollBottom()\n    },\n    doSend() {\n      if (this.user.uid && this.input.length) {\n        // firebase にメッセージを追加\n        firebase.database().ref('message').push({\n          message: this.input,\n          name: this.user.displayName,\n          image: this.user.photoURL\n        }, () => {\n          this.input = '' // フォームを空にする\n        })\n      }\n    },\n    \n    \n  }\n}\n</script>"],"sourceRoot":"src"}]}